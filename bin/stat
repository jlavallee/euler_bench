#!/usr/bin/perl
use 5.010;
use App::Rad;
use Data::Dumper;
use File::Fu;
use Scalar::Util qw{looks_like_number};
use List::Util qw{sum max};

sub D (@) {print Dumper(@_)}

sub setup {
   my $c = shift;

   # what commands to learn, ignoring private and debugging
   #$c->register_commands( { -ignore_regexp => '^(_.*|D|Dumper)$' } );
   $c->register_commands( qw{overview report} );
   $c->stash->{max_problem} = 252; # http://projecteuler.net/index.php?section=problems&page=6

   # whare are we in the dir tree?
   my $root_path = File::Fu->THIS_FILE->absolute->dirname->dirname->stringify;
   $c->stash->{root_path} = $root_path;

   # build out some data so that we can build our report
   # currently this is: what languages have we used, 
   #                    what problems have been solved in what languages (how many instances)
   map   {my ($lang,$prob) = split /\//, $_; 
          $c->stash->{implementation}->{$lang} = 1;
          $c->stash->{problem}->{$prob} = 1;
          $c->stash->{solved}->{$lang}->{$prob} = scalar(
                                                   grep{m/^\d+[_.]/} 
                                                   File::Fu->dir( $c->stash->{root_path}."/$_")->absolute->contents
                                                  ) ;
   } grep{m{/.*/}
   } map {$_ = $_->stringify; 
          s/$root_path//; 
          $_
   } File::Fu->THIS_FILE->absolute->dirname->dirname->find(sub{!m/(?:bin|inc|[.]git)/ && -d}) ;

   # now lets parse out what was passed to us via ARGV
   foreach (@ARGV) {
      if ($c->stash->{implementation}->{$_}) {
         push @{$c->options->{implementation}}, $_;
      }
      else {
         my $p = sprintf( q{%03d}, $_);
         push @{$c->options->{problem}}, $p 
            if $c->stash->{problem}->{$p};
      }
   }

}; 

sub _build_data {
   my $c = shift;
   my ($imp,$prob) = map{ $c->options->{$_} || [keys %{$c->stash->{$_}}] } qw{implementation problem};
   $prob = [sort map{sprintf q{%03d},$_} 1..$c->stash->{max_problem}]
      if defined $c->options->{all};
   return ($imp,$prob);
}


# Quickie that will build printf strings for us
sub _FL { join( ' ', map{ my $l = (looks_like_number($_)) ? $_ : length($_);
                         sprintf qq{%%%ds}, $l;
                       } @_ 
              )."\n";
        }

sub default { 
   my $c = shift;

   # allow for --help 
   if( $c->options->{HELP} || $c->options->{help} ) {
      return $c->execute('help');
   }
   overview($c,@_);
} 

sub overview :Help(grand overview) {
   my $c = shift;
   my ($imp,$prob) = _build_data($c);
   my $rows = { 'done in' => sub{my $d = shift;
                                 sprintf '%d/%d', scalar(map{values %$_}values %$d), scalar(@$prob);
                                },
                '+1 solve'=> sub{my $d = shift;
                                 my ($l) = keys %$d;
                                 scalar( grep{$_>1}
                                         map{values %$_}
                                         values %$d
                                       );
                                },
              };
   my $fmt = _FL(max(map{length}keys %$rows),@$imp);
   printf $fmt, '', @$imp;
   map { my $rowname = $_;
         printf $fmt, $rowname, 
                      map{ $rows->{$rowname}->({$_ => $c->stash->{solved}->{$_}})
                         } @$imp;
       } sort keys %$rows;
   undef; #stops the count of the map from being returned
}

sub report :Help(How we doin'? restrict by asking for something, --all will include all possible problems)  {
   my $c = shift;
   my ($imp,$prob) = _build_data($c);
   my $fmt = _FL(4,@$imp);
   printf $fmt, ' ', @$imp; #header
   map { my $p = $_; #keep the problem number
         printf $fmt, $p, map { $c->stash->{solved}->{$_}->{$p} || '-' } @$imp
           unless $c->options->{done} && !grep{defined && $_>0}map{$c->stash->{solved}->{$_}->{$p}} @$imp;
   } sort @$prob;
   undef; #stops the count of the map from being returned
};   

App::Rad->run();
