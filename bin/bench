#!/usr/bin/env perl
use strict;
use warnings;
use 5.010;
BEGIN {
   # LETO IS MY HERO
   use Cwd qw{abs_path};
   my ($lib) = abs_path(__FILE__) =~ m{(.*)bench$};
   $lib =~ s{bin/?$}{lib};
   push @INC, $lib
};

use List::Util qw{min max};
use Scalar::Util qw{looks_like_number};
use BenchTools; 

# what are we to be doing?
my $cmd = (defined $ARGV[0] && main->can($ARGV[0])) ? shift @ARGV : config->{default}->{cmd};

# build out a hash of what was requiested via @ARGV
my $requested = {};
sub mk_prob{ sprintf q{%03d}, shift }           # standardize the format of problem numbers
map{ $_ = mk_prob($_) if looks_like_number($_); # standardize the problem numbers
     $_ = config->{alias}->{$_} || $_;         # alias the input based on the config
     my $where = (problems_hash()->{$_} )      ? 'prob'    # decide what were doing by the type of data given
               : (config()->{language}->{$_})  ? 'lang'
               : ($_ =~ m/\d+:\d+/)            ? 'prob'    # !!! HACK FIXME TODO
               :                                 'opt';
     $requested->{$where}->{$_} = 1;            # build a hash so we can uniqui-fy the values
   } @ARGV;

for my $leftover (keys %{$requested->{opt}}) {
    if (-e $leftover) {
        $requested->{benchee}{$leftover} = 1;
    }
}

foreach (keys %{ $requested->{opt} }) {
   if ( $_ =~ m/^--/ ) {
      my ($key,$value) = $_ =~ m/^--(.*?)=(.*)/;
      $requested->{opt}->{$key} = $value || $requested->{opt}->{$_};
      delete $requested->{opt}->{$_};
   }
}

# If nothing was requested supply all available options
$requested->{lang} = languages_hash unless defined $requested->{lang};
$requested->{prob} = problems_hash unless defined $requested->{prob};
map{ $requested->{$_} = [sort keys %{$requested->{$_}}] } grep{$_ ne 'opt'} keys %$requested; #revert the unique values to a

$requested->{interp} = {map{ $_ => [map{$_} 
                                    grep{ -x $_ } 
                                    @{config()->{language}->{$_}->{interp}} 
                                   ]
                           } @{$requested->{lang}}
                       };

#---------------------------------------------------------------------------
#  Building up the data set
#---------------------------------------------------------------------------
my $runs = build_runs($requested);
#use Data::Dumper; warn Dumper [ $requested ];
die "No Euler Problem for that language"  unless @$runs;

my $order_numeric = { map{$_ => 1} qw{min avg max file} };

if (scalar(@$runs) 
    && defined $requested->{opt}->{order}
    && scalar( grep{$_ eq $requested->{opt}->{order}} keys %{$runs->[0]} )) {
  $runs = ($order_numeric->{$requested->{opt}->{order}})
        ? [sort {$a->{$requested->{opt}->{order}} <=> $b->{$requested->{opt}->{order}}} @$runs]
        : [sort {$a->{$requested->{opt}->{order}} cmp $b->{$requested->{opt}->{order}}} @$runs];
}

#---------------------------------------------------------------------------
#  Run the right function for the output
#---------------------------------------------------------------------------
main->$cmd(); #dispatch to the 'right' output
sub report {
   die "No Euler Problem for that language" unless @$runs;

   my $root_fmt = sprintf q{%%-%ds %%-%ds %%-%ds %%-%ds},
                          max( length('language'),    map{length} map{$_->{language}}    @$runs ),
                          max( length('interpreter'), map{length} map{$_->{interpreter}} @$runs ),
                          max( length('problem'),     map{length} map{$_->{problem}}     @$runs ),
                          max( length('solution'),    map{length} map{$_->{solution}}    @$runs );
   printf qq{$root_fmt    min     max     avg   total  %% faster than slowest\n}, 'language', 'interpreter', 'problem', 'solution'; 

   my $min_avg = min(map{$_->{avg}} @$runs);

   for my $row (@$runs){
      printf qq{$root_fmt %02.4f  %02.4f  %02.4f  %05.4f  %21s\n},
             (map{ $row->{$_} } qw{language interpreter problem solution min max avg total}), sprintf("%02.2f%%", ($row->{avg} - $min_avg) / $min_avg * 100);
   }
}

sub rawdata { D $runs };
sub data {json(@_)}; #alias data -> json for now
sub json {
   use JSON;
   print encode_json($runs);
}
sub graph {
  D {GRAPH => $runs}; 
}

