#!/usr/bin/perl
use 5.010;
use App::Rad;
use Data::Dumper;
use Scalar::Util qw{looks_like_number};
use Benchmark qw/:all :hireswallclock/;
use File::Fu;
use File::Spec::Functions;

sub D (@) {print Dumper(@_)}

sub setup {
   my $c = shift;

   # what commands to learn, ignoring private and debugging
   #$c->register_commands( { -ignore_regexp => '^(_.*|D|Dumper)$' } );
   $c->register_commands( qw{report data} ); 

   # whare are we in the dir tree?
   my $root_path = File::Fu->THIS_FILE->absolute->dirname->dirname->stringify;
   $c->stash->{root_path} = $root_path;

   # build out a list of all languages and problems
   map   {my ($lang,$prob) = split /\//, $_; 
          $c->stash->{implementation}->{$lang} = 1;
          $c->stash->{problem}->{$prob} = 1; 
   } grep{m{/.*/}
   } map {$_ = $_->stringify; 
          s/$root_path//; 
          $_
   } File::Fu->THIS_FILE->absolute->dirname->dirname->find(sub{!m/(?:bin|[.]git)/ && -d}) ;

   # stash off the how to run each language by letting us know where each interepeter is
   $c->stash->{perl5}  = $ENV{PERL5}  || 'perl5.10';
   $c->stash->{parrot} = $ENV{PARROT} || catfile( $ENV{HOME},qw{git parrot parrot});
   $c->stash->{perl6}  = $ENV{RAKUDO} || $ENV{PERL6} || catfile( $ENV{HOME},qw{git rakudo perl6});
   #$c->stash->{count}  = $ENV{COUNT}  || 100;
   $c->stash->{count}  = 100;
   
   # now lets parse out what was passed to us via ARGV
   foreach (@ARGV) {
      if ($c->stash->{implementation}->{$_}) {
         push @{$c->options->{implementation}}, $_;
      }
      else {
         my $p = sprintf( q{%03d}, $_);
         push @{$c->options->{problem}}, $p 
            if $c->stash->{problem}->{$p};
      }
   }
}; 


sub _build_cmd {
   my $c = shift;
   # standardize where to look for things based on if they exist
   my ($imp,$prob) = map{ $c->options->{$_} || [keys %{$c->stash->{$_}}] } qw{implementation problem};
   my %out = map{ my $lang = $_;
                  map  { my $runner = sprintf q{%s %s &>/dev/null}, $c->stash->{$lang}, $_;
                         #D $runner;
                         my ($label) = reverse split /$lang/, $_;
                         "$lang$label" => sub{eval{`$runner`}}       #5:file path => sub to run (trap output)
                  }map { $dir = $_; 
                         map{join '/', $dir, $_ }                    #4:make a full path for each file
                         File::Fu->dir($dir)->absolute->contents     #3:find all the files in these dirs
                  }grep{ -d                                          #2:then trim down to the ones that exists
		  }map { $c->stash->{root_path}. join '/', $lang, $_ #1:what dirs were asked for (guess)
                       } @$prob
                } @$imp;
   
}

sub default { 
   my $c = shift;
   # allow for --help 
   if( $c->options->{HELP} || $c->options->{help} ) {
      return $c->execute('help');
   }
   report($c,@_) 
} 

sub report :Help(Output a report)  {
   my $c = shift;
   my $count  = $c->options->{count} || $c->stash->{count};
   #say qq{Benchmarking $count iterations};
   cmpthese(timethese($count, {_build_cmd($c)}));
   undef; #this is here so that we dont attempt to spit out the cmpthese array
}; 

sub data :Help(Output just the data collected)  {
   my $c = shift;
   my $count  = $c->options->{count} || $c->stash->{count};
   #say qq{Benchmarking $count iterations};
   timethese($count, {_build_cmd($c)}, 'none');
}; 

sub post_process {
   use JSON qw{-convert_blessed_universally};
   my $c = shift;
   my $json = new JSON;
   $json->allow_blessed(1);
   $json->convert_blessed(1);

   printf qq{\n%s\n},
          (ref($c->output)) ? $json->encode($c->output)
                            : $c->output ;
}

App::Rad->run();
